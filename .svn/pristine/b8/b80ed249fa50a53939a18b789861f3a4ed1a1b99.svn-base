package com.rw.finance.client.controller;

import java.util.List;

import com.rw.finance.common.entity.MemberCard;
import com.rw.finance.common.entity.MemberInfo;

import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.google.gson.Gson;
import com.rw.finance.client.annotation.MemberInfoAuthor;
import com.rw.finance.client.vo.MemberCardVo;
import com.rw.finance.common.constants.MemberCardConstatns;
import com.rw.finance.common.constants.MemberInfoConstants;
import com.rw.finance.common.constants.OrderInfoConstants;
import com.rw.finance.common.entity.BankInfo;
import com.rw.finance.common.entity.order.MemberCardOrder;
import com.rw.finance.common.pay.PayResult;
import com.rw.finance.common.pay.PayerBo;
import com.rw.finance.common.pay.PayerConstants;
import com.rw.finance.common.pay.PayerFactory;
import com.rw.finance.common.service.BaseCacheService;
import com.rw.finance.common.service.MemberCardService;
import com.rw.finance.common.service.BankInfoService;
import com.rw.finance.common.service.MemberInfoService;
import com.rw.finance.common.service.OrderInfoService;
import com.rw.finance.common.service.PayChannelService;
import com.rw.finance.common.utils.Result;
import com.rw.finance.common.utils.UuidUtil;

/**
 * 
 * @file MemberCardController.java	
 * @author huanghongfei
 * @date 2017年12月14日 上午11:18:31
 * @declaration
 */
@RestController
@RequestMapping(value="/member/card")
public class MemberCardController {

	@Reference
	private MemberCardService memberCardService;
	@Reference
	private BankInfoService bankInfoService;
	@Reference
	private MemberInfoService memberInfoService;
	@Reference
	private BaseCacheService baseCacheService;
	@Reference
	private OrderInfoService orderInfoService;
	@Reference
	private PayChannelService payChannelService;
	/**
	 * 添加银行卡
	 * @param useid
	 * @param 
	 * @param owner
	 * @param number
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/add")
	public Result<Object> add(@RequestAttribute(value="memberid",required=true)long memberid,
			@RequestParam(value="bankid",required=true)long bankid,
			@RequestParam(value="cardno",required=true)String cardno,
			@RequestParam(value="mobile",required=true)String mobile){
		MemberInfo memberInfo=memberInfoService.getByMemberid(memberid);
		if(memberInfo.getIsreal().intValue()==0){//未实名不可添加银行卡
			return new Result<Object>(500,"请先实名认证",null);
		}
		BankInfo bankInfo=bankInfoService.getByBankid(bankid);
		if(StringUtils.isEmpty(bankInfo)){
			return new Result<Object>(501,"银行信息未找到或暂不支持",null);
		}
		if(memberCardService.isExsit(cardno)){
			return new Result<Object>(502,"银行卡片已存在",null);
		}
		MemberCard memberCard =new MemberCard(memberid,memberInfo.getIdnumber(),bankInfo.getBankid(),memberInfo.getRealname(),cardno,mobile,bankInfo.getBankcode(),
				bankInfo.getBankname(),bankInfo.getAbbreviation(),bankInfo.getBanklogo(),bankInfo.getCardcolor());
		String tradeNo=UuidUtil.tradeNoBuilder(OrderInfoConstants.Prefix.MemberCardOrder.getPrefix());
		PayResult payResult=new PayerFactory().DefaultPayer().auth(new PayerBo().new UserInfo(memberInfo.getIdnumber(),memberInfo.getRealname()),
				new PayerBo().new CardInfo(bankInfo.getBankname(),memberCard.getProvince(),memberCard.getCity(),memberCard.getAbbreviation(),cardno,mobile,"", ""),
				new PayerBo().new OrderInfo(tradeNo, "", 1,new PayerFactory().DefaultPayer().getBackUrl(),""));
		if(!payResult.getSuccess()){//储蓄卡鉴权失败
			return new Result<Object>(505,"储蓄卡认证失败",null);
		}
		memberCardService.add(memberCard);
		return new Result<Object>(200, null, null);
	}
	/**
	 * 将储蓄卡设为默认，只能是储蓄卡
	 * @param memberid
	 * @param cardid
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/isdef")
	public Result<Object> isdef(@RequestAttribute(value="memberid",required=true)long memberid,
			@RequestParam(value="cardid",required=true)long cardid){
		memberCardService.isdef(memberid, cardid);
		return new Result<Object>(200,null,null);
	}
	/**
	 * 鉴权
	 * @param memberid
	 * @param supid 银行编号
	 * @param number 卡号
	 * @param expirydate 有效期
	 * @param authcode 安全码
	 * @param billdate 账单日
	 * @param repaydate 还款日
	 * @param mobile 预留手机号
	 * @param code 短信验证码
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/auth")
	public Result<Object> auth(@RequestAttribute(value="memberid",required=true)long memberid,
			@RequestParam(value="bankid",required=true)long bankid,
			@RequestParam(value="cardno",required=true)String cardno,
			@RequestParam(value="expirydate",required=true)String expirydate,
			@RequestParam(value="authcode",required=true)String authcode,
			@RequestParam(value="billdate",required=true)String billdate,
			@RequestParam(value="repaydate",required=true)String repaydate,
			@RequestParam(value="mobile",required=true)String mobile){
		MemberInfo memberInfo=memberInfoService.getByMemberid(memberid);
		if(memberInfo.getIsreal().intValue()==0){//未实名不可添加银行卡
			return new Result<Object>(500,"请先实名认证",null);
		}
		if(memberCardService.isExsit(cardno)){
			return new Result<Object>(501,"银行卡片已存在",null);
		}
		BankInfo bankInfo=bankInfoService.getByBankid(bankid);
		if(StringUtils.isEmpty(bankInfo)){
			return new Result<Object>(502,"银行信息未找到",null);
		}
		//支付鉴权
		MemberCard memberCard =new MemberCard(memberid,memberInfo.getIdnumber(),bankInfo.getBankid(),
				cardno,memberInfo.getRealname(),expirydate,authcode,billdate,
				repaydate,mobile,bankInfo.getBankcode(),bankInfo.getBankname(),bankInfo.getAbbreviation(),
				bankInfo.getBanklogo(),bankInfo.getCardcolor());
		String tradeNo=UuidUtil.tradeNoBuilder(OrderInfoConstants.Prefix.MemberCardOrder.getPrefix());
		PayResult payResult=this.pay(tradeNo,memberInfo, memberCard,MemberCardConstatns.AUTH_PAY_AMOUNT);
		if(!payResult.getSuccess()){
			return new Result<Object>(505,payResult.getDetails(),null);
		}
		memberCard=memberCardService.add1(memberCard);
		orderInfoService.add(new com.rw.finance.common.entity.OrderInfo(memberInfo.getMemberid(),memberInfo.getRealname(), tradeNo,
				MemberCardConstatns.AUTH_PAY_AMOUNT, MemberCardConstatns.AUTH_PAY_AMOUNT,payChannelService.getByIsdef().getChannelid(),payResult.getPayTradeNo(),
				OrderInfoConstants.Type.MemberCardOrder.getType(), payResult.getDetails(),new Gson().toJson(new MemberCardOrder(memberCard.getCardid()))));
		MemberCardVo.AuthVo vo=new MemberCardVo().new AuthVo(payResult.getTradeNo(),memberCard.getCardid(),payResult.getIsNeedSms());
		if(payResult.getIsNeedSms()==0){//不需要验证码,已鉴权
			memberCard.setStatus(MemberCardConstatns.Status.STATUS1.getStatus());
			memberCardService.update(memberCard);
		}
		return new Result<Object>(200,null,vo);
	}
	/**
	 * 支付重发验证码
	 * @return
	 */
	@RequestMapping(value="/reSendSms")
	public Result<Object> reSendSms(@RequestParam(value="tradeNo")String tradeNo){
		PayResult payResult=new PayerFactory().DefaultPayer().reSendSms(new PayerBo().new OrderInfo(tradeNo,"", 0,new PayerFactory().DefaultPayer().getBackUrl(),""));
		if(!payResult.getSuccess()){
			return new Result<Object>(501,payResult.getDetails(),null);
		}
		return new Result<Object>(200,null,null);
	}
	
	/**
	 * 添加贷记卡
	 * @param memberid
	 * @param cardid 卡编号
	 * @param tn 支付平台流水号
	 * @param code 短信验证码
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/confirm")
	public Result<Object> confirm(@RequestAttribute(value="memberid",required=true)long memberid,
		@RequestParam(value="tn",required=true)String tn,
		@RequestParam(value="code",required=true)String code){
		PayResult payResult=this.confirm(tn, code);
		if(!payResult.getSuccess()){
			return new Result<Object>(505,payResult.getDetails(),null);
		}
		return new Result<Object>(200,null,null);
	}
	/**
	 * 申请支付
	 * @param memberInfo
	 * @param memberCard
	 */
	private PayResult pay(String tradeNo,MemberInfo memberInfo,MemberCard memberCard,Double amount){
		return new PayerFactory().DefaultPayer().pay(new PayerBo().new UserInfo(memberInfo.getIdnumber(), memberInfo.getRealname()),
				new PayerBo().new CardInfo(memberCard.getBankname(),memberCard.getProvince(),memberCard.getCity(),memberCard.getAbbreviation(),memberCard.getCardno(), memberCard.getMobile(), memberCard.getAuthcode(),memberCard.getExpirydate()),
				new PayerBo().new OrderInfo(tradeNo, "", amount,new PayerFactory().DefaultPayer().getBackUrl(),""));
	}
	/**
	 * 确认支付
	 * @param tn
	 */
	private PayResult confirm(String tn,String smsCode){
		PayResult payResult=new PayerFactory().DefaultPayer().confirm(new PayerBo().new OrderInfo(tn, "", 0,new PayerFactory().DefaultPayer().getBackUrl(),smsCode));
		return payResult;
	}
	
	
	/**
	 * 获取用户借记卡列表
	 * @param memberid
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/listByMemberidAndType")
	public Result<Object> listByMemberidAndType(@RequestAttribute(value="memberid",required=true)long memberid){
		List<MemberCard> memberCards =this.memberCardService.listByMemberidAndType(memberid,MemberCardConstatns.Type.TYPE1.getType());
		return new Result<Object>(200,null, memberCards.stream().filter(memberCard -> memberCard.getStatus()==1).toArray());
	}
	/**
	 * 获取用户袋记卡列表
	 * @param memberid
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_1)
	@PostMapping(value="/listByMemberidAndType1")
	public Result<Object> listByMemberidAndType1(@RequestAttribute(value="memberid",required=true)long memberid){
		List<MemberCard> memberCards =this.memberCardService.listByMemberidAndType(memberid,MemberCardConstatns.Type.TYPE2.getType());
		return new Result<Object>(200,null,  memberCards.stream().filter(memberCard -> memberCard.getStatus()==1).toArray());
	}
	
	/**
	 * 贷记卡编辑
	 * @param memberid
	 * @param cardid
	 * @param billdate
	 * @param repaydate
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_1)
	@PostMapping(value="/updByMemberidAndCardid")
	public Result<Object> updByMemberidAndCardid(@RequestAttribute(value="memberid",required=true)long memberid,
			@RequestParam(value="cardid",required=true)long cardid,
			@RequestParam(value="billdate",required=true)String billdate,
			@RequestParam(value="repaydate",required=true)String repaydate){
			MemberCard memberCard=memberCardService.getByMemberidAndCardid(memberid, cardid);
			if(StringUtils.isEmpty(memberCard)){
				return new Result<Object>(501,"银行卡片不存在",null);
			}
			memberCard.setBilldate(billdate);
			memberCard.setRepaydate(repaydate);
			memberCardService.update(memberCard);
		return new Result<Object>(200,null,null);
	}
	/**
	 * 删除卡片
	 * @param memberid
	 * @param cardid
	 * @return
	 */
	@MemberInfoAuthor(level=MemberInfoConstants.Level.LEVEL_0)
	@PostMapping(value="/delByMemberidAndCardid")
	public Result<Object> delByMemberidAndCardid(@RequestAttribute(value="memberid",required=true)long memberid,
			@RequestParam(value="cardid",required=true)long cardid){
		memberCardService.delByMemberidAndCardid(memberid, cardid);
		return new Result<Object>(200,null,null);
	}
}
